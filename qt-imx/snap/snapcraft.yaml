name: qt-imx
base: core22
adopt-info: qt5
summary: Qt application libraries for i.MX 6 & 8 SoCs
description: |
  Qt application libraries compiled with support for the eglfs backend on i.MX
  6 & 8 SoCs.

  Users can either use this snap in `stage-snaps` to utilise the prebuilt
  libraries for their application, or extend this snap by adding the appropriate
  build steps.

  The Qt libraries are available in the /usr/local/qt5 directory in the snap.

  As part of the build process, the GPU library binaries for the SoCs are
  downloaded, extracted, and added to the snap. It's assumed you know what
  you're doing, license-wise, if you're using and/or distributing this snap.

grade: devel
confinement: devmode

architectures:
  - build-on:  [amd64, arm64]
    build-for: [arm64]
  - build-on:  [amd64, armhf]
    build-for: [armhf]

package-repositories:
  - type: apt
    components: [main, universe]
    architectures: [arm64, armhf]
    suites: [jammy, jammy-security, jammy-updates]
    key-id: F6ECB3762474EDA9D21B7022871920D1991BC93C
    url: http://ports.ubuntu.com/ubuntu-ports

plugs:
  gpu:
    interface: custom-device

parts:
  imx-gpu-viv:
    plugin: dump
    source: .
    build-packages:
      - wget
    override-build: |
      if [ "${CRAFT_ARCH_BUILD_FOR}" = "armhf" ]; then
        export WGET_ARCH="aarch32"
      elif [ "${CRAFT_ARCH_BUILD_FOR}" = "arm64" ]; then
        export WGET_ARCH="aarch64"
      else
        echo "Building for architecture ${CRAFT_ARCH_BUILD_FOR} not supported!"
        echo "Please build for either ARM64 or ARMHF"
        exit -1
      fi

      rm -f imx-gpu-viv.bin
      wget https://www.nxp.com/lgfiles/NMG/MAD/YOCTO/imx-gpu-viv-6.4.3.p0.0-${WGET_ARCH}.bin \
        -O imx-gpu-viv.bin
      chmod a+x imx-gpu-viv.bin
      ./imx-gpu-viv.bin --auto-accept --force
      craftctl default
    organize:
      imx-gpu-viv-*/gpu-core/usr/lib/dri:       usr/lib/dri
      imx-gpu-viv-*/gpu-core/usr/include:       usr/include
      imx-gpu-viv-*/gpu-core/usr/lib/pkgconfig: usr/lib/pkgconfig
      imx-gpu-viv-*/gpu-core/etc/Vivante.icd:   etc/OpenCL/vendors/Vivante.icd
      imx-gpu-viv-*/gpu-core/usr/lib/fb/*:      "usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/"
      imx-gpu-viv-*/gpu-core/usr/lib/*.so*:     "usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/"
    stage:
      - -imx-gpu-viv.bin
      - -imx-gpu-viv-*
      - -patches

  dependencies:
    plugin: nil
    stage-packages:
      # Qt needs a lot of packages from the target arch to build.
      # Normally these would go in build-packages but Qt does a lot of
      # cross-compilation for feature detection
      - gdb:${CRAFT_ARCH_BUILD_FOR}
      - libbsd0:${CRAFT_ARCH_BUILD_FOR}
      - libc-dev:${CRAFT_ARCH_BUILD_FOR}
      - libcrypt-dev:${CRAFT_ARCH_BUILD_FOR}
      - libcrypt1:${CRAFT_ARCH_BUILD_FOR}
      - libdbus-1-3:${CRAFT_ARCH_BUILD_FOR}
      - libdbus-1-dev:${CRAFT_ARCH_BUILD_FOR}
      - libdrm-dev:${CRAFT_ARCH_BUILD_FOR}
      - libdrm2:${CRAFT_ARCH_BUILD_FOR}
      - libffi7:${CRAFT_ARCH_BUILD_FOR}
      - libfontconfig-dev:${CRAFT_ARCH_BUILD_FOR}
      - libglapi-mesa:${CRAFT_ARCH_BUILD_FOR}
      - libglvnd-dev:${CRAFT_ARCH_BUILD_FOR}
      - libglvnd0:${CRAFT_ARCH_BUILD_FOR}
      - libicu-dev:${CRAFT_ARCH_BUILD_FOR}
      - libicu70:${CRAFT_ARCH_BUILD_FOR}
      - libinput-dev:${CRAFT_ARCH_BUILD_FOR}
      - libpcre2-dev:${CRAFT_ARCH_BUILD_FOR}
      - libssl-dev:${CRAFT_ARCH_BUILD_FOR}
      - libts-dev:${CRAFT_ARCH_BUILD_FOR}
      - libwayland-client0:${CRAFT_ARCH_BUILD_FOR}
      - libwayland-cursor0:${CRAFT_ARCH_BUILD_FOR}
      - libwayland-dev:${CRAFT_ARCH_BUILD_FOR}
      - libwayland-server0:${CRAFT_ARCH_BUILD_FOR}
      - libx11-6:${CRAFT_ARCH_BUILD_FOR}
      - libxau6:${CRAFT_ARCH_BUILD_FOR}
      - libxcb1-dev:${CRAFT_ARCH_BUILD_FOR}
      - libxcb1:${CRAFT_ARCH_BUILD_FOR}
      - libxdamage1:${CRAFT_ARCH_BUILD_FOR}
      - libxdmcp6:${CRAFT_ARCH_BUILD_FOR}
      - libxext6:${CRAFT_ARCH_BUILD_FOR}
      - libxfixes3:${CRAFT_ARCH_BUILD_FOR}
      - strace:${CRAFT_ARCH_BUILD_FOR}
    override-build: |
      craftctl default
      # Move all files from /lib to /usr/lib and create a symlink
      cp -rf  "${CRAFT_PART_INSTALL}/lib/"*   "${CRAFT_PART_INSTALL}/usr/lib"
      rm -rf  "${CRAFT_PART_INSTALL}/lib"
      ln -srf "${CRAFT_PART_INSTALL}/usr/lib" "${CRAFT_PART_INSTALL}/lib"
    stage:
      # Remove all mesa GL libraries
      - -usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/libGLES*
      - -usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/libGL.*
      - -usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/libEGL*
      - -usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/libGLX*
      - -usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/libvulkan*
      - -usr/include/EGL
      - -usr/include/GL
      - -usr/include/GLES*
      - -usr/include/KHR/khrplatform.h
    prime:
      - -usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/dri
      - -usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/libdrm_*
      - -usr/lib/udev
      - -usr/lib/cmake
      - -usr/share/doc

  qt5:
    after:
      - imx-gpu-viv
      - dependencies
    plugin: nil
    source: https://github.com/qt/qt5.git
    source-tag: v5.6.3
    source-depth: 1
    build-environment:
      - PATH: /usr/lib/ccache:${PATH}
      - on amd64:
        - DEVICE_OPTIONS: "-device-option CROSS_COMPILE=${CRAFT_ARCH_TRIPLET_BUILD_FOR}-"
        - to armhf:
          - DEVICE: "linux-imx6-g++"
        - to arm64:
          - DEVICE: "linux-imx8-g++"
      - on armhf:
        - DEVICE_OPTIONS: ""
        - DEVICE: "linux-imx6-g++"
      - on arm64:
        - DEVICE_OPTIONS: ""
        - DEVICE: "linux-imx8-g++"
    build-packages:
      - ccache
      - patch
      - pkg-config
      - python-is-python3
      - on arm64,armhf:
        - g++
        - gcc
      - on amd64:
        - g++-${CRAFT_ARCH_TRIPLET_BUILD_FOR}
        - gcc-${CRAFT_ARCH_TRIPLET_BUILD_FOR}
    override-pull: |
      craftctl default
      patch -p1 < "${CRAFT_PROJECT_DIR}/patches/0001-Added-linux-imx8-g.patch"
      patch -p1 < "${CRAFT_PROJECT_DIR}/patches/0002-Do-not-enforce-CROSS_COMPILE.patch"
      patch -p1 < "${CRAFT_PROJECT_DIR}/patches/0003-SocketCAN-Fix-compiler-error-SIOCGSTAMP-was-not-decl.patch"
    override-build: |
      craftctl set version=$(git describe --tags | cut -dv -f2)

      # Unset all snapcraft build variables so they don't interfere
      unset LD
      unset CC
      unset CXX
      unset CFLAGS
      unset CXXFLAGS
      unset LDFLAGS
      unset PKG_CONFIG_PATH

      ./configure -debug -nomake tests -nomake examples -opensource -confirm-license \
        -prefix /usr -sysroot "${CRAFT_STAGE}" \
        -opengl es2 -no-pulseaudio -qpa eglfs -qt-xcb -qt-pcre \
        -qt-libjpeg -qt-libpng -qt-freetype -qt-zlib -qt-xkbcommon-x11 \
        -pkg-config -no-mtdev \
        -xkb-config-root /snap/qt-imx/current/usr/share/X11/xkb \
        -device ${DEVICE} ${DEVICE_OPTIONS} \
        -no-alsa -no-openssl -no-audio-backend -no-use-gold-linker \
        -extprefix "${CRAFT_PART_INSTALL}/usr" \
        -skip qtwebengine \
        -libdir "${CRAFT_PART_INSTALL}/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/"

      make -j$(nproc)

      make install
    stage:
      - -lib
    prime:
      - -usr/doc

  qt-conf:
    after:
      - qt5
    plugin: nil
    override-build: |
      cat > "${CRAFT_PART_INSTALL}/qt.conf" << EOF
      [Paths]
      Prefix = ../
      Libraries = "../lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/"
      Sysroot = ../../
      EOF
    organize:
      qt.conf: usr/bin/qt.conf

  hello-world:
    after:
      - qt5
    plugin: nil
    source: hello-world/
    override-build: |
      "${CRAFT_STAGE}/usr/bin/qmake"
      make -j$(nproc)
      make INSTALL_ROOT="${CRAFT_PART_INSTALL}" install

apps:
  hello-world:
    command: opt/hello-world/bin/hello-world
    environment:
      QT_PLUGIN_PATH: $SNAP/usr/plugins
    plugs:
      - opengl
      - hardware-observe
      - framebuffer
      - gpu

layout:
  /etc/glvnd:
    bind: $SNAP/etc/glvnd
  /usr/share/X11/xkb:
    bind: $SNAP/usr/share/X11/xkb
  /usr/share/fonts:
    bind: $SNAP/usr/share/fonts
  /usr/share/glvnd:
    bind: $SNAP/usr/share/glvnd
  /usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/dri:
    bind: $SNAP/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}/dri
  /usr/share/libdrm:
    bind: $SNAP/usr/share/libdrm
  /usr/lib/fonts:
    bind: $SNAP/usr/lib/fonts
